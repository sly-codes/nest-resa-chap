generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// ENUMERATIONS
// ----------------------------------------------------

enum Status {
  PENDING
  CANCELED
  CONFIRMED
  REJECTED
}

// ----------------------------------------------------
// 1. User (Locateur ET Locataire)
// ----------------------------------------------------

enum Provider {
  LOCAL
  GOOGLE
  GITHUB
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  username       String? @unique
  contactPhone   String?
  firstName      String?
  lastName       String?
  hashedPassword String? // Rendre optionnel pour les utilisateurs sociaux
  hashedRt       String?
  isVerified     Boolean @default(false)

  // ðŸ’¡ NOUVEAUX CHAMPS D'IMAGE ðŸ’¡
  profilePictureUrl String?
  coverPictureUrl   String?

  // ðŸš¨ CHAMPS POUR AUTH SOCIALE ðŸš¨
  provider   Provider @default(LOCAL)
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation 1-N : Un utilisateur peut possÃ©der plusieurs ressources
  resources Resource[]

  // Relation 1-N : Un utilisateur peut crÃ©er plusieurs rÃ©servations (Locataire)
  reservationsMade Reservation[] @relation("LocataireReservations")

  // ðŸš¨ INDEX UNIQUE COMPOSITE ðŸš¨
  // Assure qu'un utilisateur n'est inscrit qu'une seule fois par plateforme
  @@unique([provider, providerId])
}

// ----------------------------------------------------
// 2. Resource (La Salle ou le MatÃ©riel)
// ----------------------------------------------------

// ----------------------------------------------------
// 2. Resource (La Salle ou le MatÃ©riel)
// ----------------------------------------------------

enum PriceUnit {
  HOUR
  DAY
  WEEK
  MONTH
}

model Resource {
  id          String  @id @default(uuid())
  name        String
  type        String // Ex: "ROOM", "EQUIPMENT"
  description String?

  // ðŸ’¡ NOUVEAU: Champs de Prix
  price     Float     @default(0) // Prix de la ressource (peut Ãªtre 0 si gratuit)
  priceUnit PriceUnit @default(HOUR) // UnitÃ© de tarification

  // ðŸ’¡ NOUVEAU: Champs de Localisation
  country String?
  city    String?
  address String?

  // ðŸ’¡ NOUVEAU: MÃ©dia
  mainImage String? // URL publique de l'image principale (stockÃ©e sur S3, Cloudinary, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation N-1 : Une ressource appartient Ã  un seul Locateur (ownerId est l'ID du User)
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relation 1-N : Une ressource peut avoir plusieurs rÃ©servations
  reservations Reservation[]
}

// ----------------------------------------------------
// 3. Reservation (La Demande de RÃ©servation)
// ----------------------------------------------------

model Reservation {
  id String @id @default(uuid())

  // Relation N-1 : Le Locataire qui a fait la demande
  locataireId String // NOUVEAU : ID de l'utilisateur qui rÃ©serve
  locataire   User   @relation("LocataireReservations", fields: [locataireId], references: [id], onDelete: Restrict)

  // Plage horaire
  dateDebut DateTime
  dateFin   DateTime

  status Status @default(PENDING) // Le nouveau statut 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation N-1 : La ressource liÃ©e
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Restrict)

  // Notes facultatives du locataire
  notes String?
}
