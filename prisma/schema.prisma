generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// ENUMERATIONS
// ----------------------------------------------------

enum Status {
  PENDING
  CANCELED
  CONFIRMED
  REJECTED
}

// ----------------------------------------------------
// 1. User (Locateur ET Locataire)
// ----------------------------------------------------

enum Provider {
  LOCAL
  GOOGLE
  GITHUB
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  username       String? @unique
  contactPhone   String?
  firstName      String?
  lastName       String?
  hashedPassword String? // Rendre optionnel pour les utilisateurs sociaux
  hashedRt       String?
  isVerified     Boolean @default(false)

  profilePictureUrl String?
  coverPictureUrl   String?

  provider   Provider @default(LOCAL)
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resources Resource[]

  reservationsMade Reservation[] @relation("LocataireReservations")

  // Assure qu'un utilisateur n'est inscrit qu'une seule fois par plateforme
  @@unique([provider, providerId])
}

// ----------------------------------------------------
// 2. Resource (La Salle ou le Matériel)
// ----------------------------------------------------

enum PriceUnit {
  HOUR
  DAY
  WEEK
  MONTH
}

model Resource {
  id          String  @id @default(uuid())
  name        String
  type        String 
  description String?

  price     Float     @default(0) 
  priceUnit PriceUnit @default(HOUR) 

  country String?
  city    String?
  address String?

 
  mainImage String? // URL publique de l'image principale (stockée sur Cloudinary)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  reservations Reservation[]
}

// ----------------------------------------------------
// 3. Reservation (La Demande de Réservation)
// ----------------------------------------------------

model Reservation {
  id String @id @default(uuid())

  locataireId String
  locataire   User   @relation("LocataireReservations", fields: [locataireId], references: [id], onDelete: Restrict)

  // Plage horaire
  dateDebut DateTime
  dateFin   DateTime

  status Status @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Restrict)

  notes String?
}
