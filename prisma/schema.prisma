
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------------------
// ENUMERATIONS
// ----------------------------------------------------

enum Status {
  PENDING
  CANCELED
  CONFIRMED
}


// ----------------------------------------------------
// 1. User (Locateur ET Locataire)
// ----------------------------------------------------

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  // Informations de profil (non requises à l'inscription)
  username        String?     // Pour l'affichage public
  contactPhone    String?     // Numéro de contact
  firstName       String?
  lastName        String?
  
  // Authentification
  hashedPassword  String
  hashedRt        String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relation 1-N : Un utilisateur peut posséder plusieurs ressources
  resources       Resource[]
  
  // Relation 1-N : Un utilisateur peut créer plusieurs réservations (Locataire)
  reservationsMade Reservation[] @relation("LocataireReservations")
}


// ----------------------------------------------------
// 2. Resource (La Salle ou le Matériel)
// ----------------------------------------------------

model Resource {
  id              String      @id @default(uuid())
  name            String
  type            String      // Ex: "salle", "materiel"
  description     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relation N-1 : Une ressource appartient à un seul Locateur (ownerId est l'ID du User)
  ownerId         String
  owner           User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relation 1-N : Une ressource peut avoir plusieurs réservations
  reservations    Reservation[]
}


// ----------------------------------------------------
// 3. Reservation (La Demande de Réservation)
// ----------------------------------------------------

model Reservation {
  id                  String      @id @default(uuid())
  
  // Relation N-1 : Le Locataire qui a fait la demande
  locataireId         String      // NOUVEAU : ID de l'utilisateur qui réserve
  locataire           User        @relation("LocataireReservations", fields: [locataireId], references: [id], onDelete: Restrict)
  
  // Plage horaire
  dateDebut           DateTime
  dateFin             DateTime
  
  status              Status      @default(PENDING) // Le nouveau statut 

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // Relation N-1 : La ressource liée
  resourceId          String
  resource            Resource    @relation(fields: [resourceId], references: [id], onDelete: Restrict)
  
  // Notes facultatives du locataire
  notes               String?
}
